
'use server';

/**
 * @fileOverview AI recipe suggestion flow.
 *
 * This flow takes a list of ingredients and cooking tools as input and returns
 * recipe suggestions generated by AI, including a generated image for each recipe.
 *
 * @interface RecipeSuggestionInput - The input type for recipeSuggestion.
 * @interface RecipeSuggestionOutput - The output type for recipeSuggestion.
 * @function recipeSuggestion - The function that handles the recipe suggestion process.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const RecipeSuggestionInputSchema = z.object({
  ingredients: z
    .string()
    .describe('A comma-separated list of ingredients available.'),
  cookingTools: z
    .string()
    .describe('A comma-separated list of cooking tools available.'),
});
export type RecipeSuggestionInput = z.infer<typeof RecipeSuggestionInputSchema>;

const RecipeSchema = z.object({
    title: z.string().describe("The name of the recipe."),
    description: z.string().describe("A short, enticing description of the recipe."),
    ingredients: z.array(z.string()).describe("A list of ingredients for the recipe."),
    steps: z.array(z.string()).describe("The step-by-step instructions for preparing the recipe."),
    servings: z.string().describe("The number of servings the recipe makes, e.g., '2 porsi'."),
    prepTime: z.string().describe("The estimated preparation time, e.g., '15 menit'."),
    imageUrl: z.string().optional().describe("A data URI of a generated image for the recipe."),
});

const RecipeSuggestionOutputSchema = z.object({
  suggestions: z.array(RecipeSchema).describe('A list of recipe suggestions based on the provided ingredients and tools.'),
});
export type RecipeSuggestionOutput = z.infer<typeof RecipeSuggestionOutputSchema>;


export async function recipeSuggestion(input: RecipeSuggestionInput): Promise<RecipeSuggestionOutput> {
  return recipeSuggestionFlow(input);
}

const recipeSuggestionPrompt = ai.definePrompt({
  name: 'recipeSuggestionPrompt',
  input: {schema: RecipeSuggestionInputSchema},
  output: {schema: RecipeSuggestionOutputSchema},
  prompt: `You are a helpful assistant that suggests recipes based on the ingredients and cooking tools a user has available.

  The user has the following ingredients: {{{ingredients}}}
  The user has the following cooking tools: {{{cookingTools}}}

  Suggest some recipes that the user can make with these ingredients and tools. Be creative and consider simple recipes that are suitable for students living in dorms.
  
  Provide a description that is short and appealing. Keep the ingredients list and steps simple and clear.
  
  Generate between 2 to 3 recipes.`,
});

const recipeSuggestionFlow = ai.defineFlow(
  {
    name: 'recipeSuggestionFlow',
    inputSchema: RecipeSuggestionInputSchema,
    outputSchema: RecipeSuggestionOutputSchema,
  },
  async input => {
    const {output} = await recipeSuggestionPrompt(input);
    if (!output?.suggestions) {
      return { suggestions: [] };
    }
    
    const imagePromises = output.suggestions.map(async (recipe) => {
        try {
            const { media } = await ai.generate({
                model: 'googleai/gemini-2.0-flash-preview-image-generation',
                prompt: `A delicious-looking photo of "${recipe.title}", realistic, high quality food photography.`,
                config: {
                    responseModalities: ['TEXT', 'IMAGE'],
                },
            });
            recipe.imageUrl = media?.url;
        } catch (e) {
            console.error(`Failed to generate image for ${recipe.title}:`, e);
            recipe.imageUrl = 'https://placehold.co/600x400.png'; // Fallback
        }
        return recipe;
    });

    const suggestionsWithImages = await Promise.all(imagePromises);

    return { suggestions: suggestionsWithImages };
  }
);
